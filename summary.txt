Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\resumo.py
Conteúdo:
import os

def summarize_python_files(directory):
    # Caminho para o arquivo de resumo que será criado
    summary_path = os.path.join(directory, 'summary.txt')
    
    with open(summary_path, 'w', encoding='utf-8') as summary_file:
        # Itera por todos os diretórios e arquivos
        for root, dirs, files in os.walk(directory):
            for filename in files:
                if filename.endswith('.py'):
                    file_path = os.path.join(root, filename)
                    # Anota o nome do arquivo no arquivo de resumo
                    summary_file.write(f'Nome do arquivo: {file_path}\n')
                    
                    # Abre e lê o conteúdo do arquivo Python com a codificação UTF-8
                    with open(file_path, 'r', encoding='utf-8') as file:
                        content = file.read()
                        # Anota o conteúdo do arquivo no arquivo de resumo
                        summary_file.write('Conteúdo:\n')
                        summary_file.write(content)
                        summary_file.write('\n\n')  # Espaços entre conteúdos de arquivos diferentes

# Chamada da função especificando o diretório desejado
summarize_python_files(r'C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python')


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\classes\34-classe.py
Conteúdo:
class Pessoa:
    def __init__(self, nome, idade, endereco):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco
    
    def imprimir_informacoes(self):
        print("Nome:", self.nome)
        print("Idade:", self.idade)
        print("Endereço:", self.endereco)

# Exemplo de uso da classe Pessoa
pessoa1 = Pessoa("João", 30, "Rua A, nº 123")
pessoa1.imprimir_informacoes()



Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\classes\35-classe_metodos_especiais.py
Conteúdo:
class Pessoa:
    def __init__(self, nome, idade, endereco):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco

    def __str__(self):
        return f"{self.nome} {self.idade} {self.endereco}"

    def __repr__(self):
        return f'Pessoa("{self.nome}", "{self.idade}", {self.endereco})'

pessoa1 = Pessoa("João", 30, "Rua A, nº 123")
print(pessoa1)
print(repr(pessoa1))

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\classes\36-classe_heranca.py
Conteúdo:
class Pessoa:
    def __init__(self, nome, idade, endereco):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco

class Profissional(Pessoa):
    def __init__(self, nome, idade, endereco, profissao, localdetrabalho):
        super().__init__(nome, idade, endereco)    
        self.profissao = profissao
        self.localdetrabalho = localdetrabalho 
    
    def __str__(self):
        return f"{self.nome} {self.idade} {self.endereco} {self.localdetrabalho} {self.profissao}"

    def __repr__(self):
        return f'Profissional("{self.nome}", "{self.idade}", "{self.endereco}", "{self.profissao}", "{self.localdetrabalho}")'


p1 = Profissional("João", 30, "Rua 1", "Engenheiro", "Empresa A")
print(p1)  
print(repr(p1))  


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\classes\37-classe_polimorfismo.py
Conteúdo:
class Animal:
    def falar(self):
        pass

class Cachorro(Animal):
    def falar(self):
        return "Au Au"

class Gato(Animal):
    def falar(self):
        return "Miau"

def som_do_animal(animal):
    print(animal.falar())

som_do_animal(Cachorro())
som_do_animal(Gato())


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\dicionarios\09-frequencia_elementos.py
Conteúdo:
lista = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]
frequencia = {}
for i in lista:
    if i in frequencia:
        frequencia[i] += 1
    else:
        frequencia[i] = 1
print(frequencia)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\dicionarios\19-adicionar_elementos_dicionario.py
Conteúdo:
pessoa = {'nome': 'Jao', 'idade': 28, 'cidade': 'Fortaleza'}

pessoa['profissão'] = 'Engenheiro'
pessoa['profissão'] = 'teste'
print(pessoa)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\dicionarios\20-impressao_dicionario.py
Conteúdo:
pessoa = {'nome': 'Jao', 'idade': 28, 'cidade': 'Fortaleza'}

pessoa['profissão'] = 'Engenheiro'
pessoa['profissão'] = 'teste'



for i,e in pessoa.items():
    print(f"Chave: {i}, Valor: {e}")

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\dicionarios\26-valor_padrao_dicionario.py
Conteúdo:
pessoa = {'nome': 'Jao', 'idade': 28, 'cidade': 'Fortaleza'}

valor = pessoa.get('c', 'valor padrao se a chave não existir no dicionário')

print(valor)
print(pessoa)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\excecoes\25-tratamento_excecao.py
Conteúdo:
try:
    num = int('dez')
    print(type(num))
except ValueError:
    print("Erro: não é possível converter a string para inteiro.")


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\funcoes\31-numero_variavel_de_args.py
Conteúdo:
def calcular_media(*args):
    if len(args) == 0:
        return 0
    return sum(args) / len(args)


print(calcular_media(2, 4, 6)) 
print(calcular_media(10, 20, 30, 40, 50))  
print(calcular_media())  


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\funcoes\32-funcoes_lambda.py
Conteúdo:
variavel = lambda x: x**2

print(variavel(4))

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\04-impressao_lista.py
Conteúdo:
lista = ['pedro', 'jorge', 'amadeu', 'paulo', 'lucas']
for i in lista:
    print(i, end= "")

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\08-lista_quadrados.py
Conteúdo:
lista = []

for i in range(1, 31):
    lista.append(i**2)

print(lista)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\12-concatenar_lista_strings.py
Conteúdo:
lista = ['eu ', 'sou ', 'rica']
resultado = ""
for i in lista:
    resultado = resultado + i

print(resultado)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\13-encontrar_maior_numero.py
Conteúdo:
numeros = [5, 10, 15, 2, 42, 25]
maior = 0

for i in numeros:
    if i > maior:
        maior = i

print(maior)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\14-intercalar_duas_listas.py
Conteúdo:
lista1 = [1, 2, 3]
lista2 = ['a', 'b', 'c']
intercalada = []
for i in range(len(lista1)):
    intercalada.append(lista1[i])
    intercalada.append(lista2[i])
print(intercalada)


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\15-compreensao_quadrados.py
Conteúdo:
quadrados = [i**2 for i in range(1, 31)]
print(quadrados)


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\16-modificacoes_lista.py
Conteúdo:
#Crie uma lista com cinco números inteiros e faça as seguintes operações: adicionar um número ao final, remover o segundo elemento e imprimir a lista final.


lista = []

#Adiciona os elementos de outra lista ao final da lista atual.
lista.extend(['1item', '2item', '3item', '4item', 'a'])

#Adiciona um elemento ao final da lista.
lista.append('5item')

# insert(): Insere um elemento em uma posição específica da lista.
lista.insert(0, '0item')

#Remove a primeira ocorrência de um elemento específico da lista.
lista.remove("3item")

#Inverte a ordem dos elementos na lista.
lista.reverse()

#Ordena os elementos da lista.
lista.sort()

#Remove e retorna o elemento de uma posição específica da lista (ou o último elemento se nenhum índice for especificado).
elemento_removido = lista.pop(1)

print(elemento_removido)
print(lista)

#Remove todos os elementos da lista.
lista.clear()



Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\17-verifica_presenca.py
Conteúdo:
#Dado uma lista com os valores [5, 7, 9, 3, 2], escreva um código que verifica se o número 9 está presente na lista e imprime uma mensagem confirmando sua presença.

lista = [5, 7, 4, 3, 2]
if 9 in lista:
    print("ta na lista")

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\18-soma_itens_lista.py
Conteúdo:
lista = [10, 20, 30, 40]
soma = 0

#total = sum(lista)

for i in lista:
    soma = i + soma
print(soma)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\22-calculo_media_lista.py
Conteúdo:
lista = [23, 45, 67, 89]

resultado = sum(lista) / len(lista)

print(resultado)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\27-acesso_lista_aninhada.py
Conteúdo:
lista = [[11, 12], [23, 24]]

print(lista[0][1])

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\30-acronimo_string.py
Conteúdo:
texto = "Olá, mundo!"

numeros = [4 + ord(letra[:1]) for letra in texto]

print(numeros)

letras = [chr(numeros - 4) for numeros in numeros]

print("".join(letras))

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\bubble_sort.py
Conteúdo:
# Implementação Básica do Bubble Sort
def bubble_sort(lista):
    n = len(lista)
    for i in range(n):
        for j in range(0, n-i-1):
            if lista[j] > lista[j+1]:
                lista[j], lista[j+1] = lista[j+1], lista[j]


lista = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(lista)
print("Lista ordenada:", lista)




# Implementação Otimizada do Bubble Sort
def bubble_sort_optimized(lista):
    n = len(lista)
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if lista[j] > lista[j+1]:
                lista[j], lista[j+1] = lista[j+1], lista[j]
                swapped = True
        if not swapped:
            break


lista = [64, 34, 25, 12, 22, 11, 90]
bubble_sort_optimized(lista)
print("Lista ordenada:", lista)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\busca_binaria.py
Conteúdo:
def busca_binaria(lista, elemento):
    esquerda, direita = 0, len(lista) - 1

    while esquerda <= direita:
        meio = (esquerda + direita) // 2

        # Verifica se o elemento está no meio
        if lista[meio] == elemento:
            return meio
        # Se o elemento for maior, ignora a metade esquerda
        elif lista[meio] < elemento:
            esquerda = meio + 1
        # Se o elemento for menor, ignora a metade direita
        else:
            direita = meio - 1

    # Se o elemento não estiver presente
    return -1

# Exemplo de uso
lista_ordenada = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
elemento_procurado = 7

resultado = busca_binaria(lista_ordenada, elemento_procurado)

if resultado != -1:
    print(f'Elemento encontrado no índice {resultado}.')
else:
    print('Elemento não encontrado na lista.')


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\list_comprehensions.py
Conteúdo:
# List Comprehensions - Exercícios Resolvidos

# Exercício 1
# Criar uma lista de números de 0 a 9.
numeros = [x for x in range(10)]
print("Exercício 1:", numeros)
# Resultado esperado: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# Exercício 2
# Criar uma lista de quadrados dos números de 0 a 9.
quadrados = [x**2 for x in range(10)]
print("Exercício 2:", quadrados)
# Resultado esperado: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# Exercício 3
# Criar uma lista dos números pares de 0 a 20.
pares = [x for x in range(21) if x % 2 == 0]
print("Exercício 3:", pares)


# Exercício 4
# Criar uma lista dos comprimentos das palavras em uma lista de palavras.
palavras = ["python", "list", "comprehension", "exercises"]
comprimentos = [len(palavra) for palavra in palavras]
print("Exercício 4:", comprimentos)


# Exercício 5
# Criar uma lista de números de 0 a 9, mas substituindo os números ímpares por -1.
substituidos = [x if x % 2 == 0 else -1 for x in range(10)]
print("Exercício 5:", substituidos)


# Exercício 6
# Filtrar uma lista de números, mantendo apenas aqueles que são divisíveis por 3.
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
divisiveis_por_3 = [x for x in numeros if x % 3 == 0]
print("Exercício 6:", divisiveis_por_3)


# Exercício 7
# Criar uma lista de pares (número, quadrado) para números de 0 a 9.
pares = [(x, x**2) for x in range(10)]
print("Exercício 7:", pares)


# Exercício 8
# Converter uma lista de strings em uma lista de caracteres.
palavras = ["hello", "world"]
caracteres = [char for palavra in palavras for char in palavra]
print("Exercício 8:", caracteres)


# Exercício 9
# Criar uma lista de listas, onde cada sublista contém números de 0 a 4.
listas = [[x for x in range(5)] for _ in range(3)]
print("Exercício 9:", listas)


# Exercício 10
# Aplanar uma lista de listas em uma única lista.
listas = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]
aplanada = [item for sublista in listas for item in sublista]
print("Exercício 10:", aplanada)

# Exercício 11
# Transformar uma lista de strings em uma lista de dicionários com a string e seu comprimento.
strings = ["apple", "banana"]
dicionarios = [{"word": s, "length": len(s)} for s in strings]
print("Exercício 11:", dicionarios)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\listas\matrizes\matriz.py
Conteúdo:
#Usando listas aninhadas para fazer uma matriz

matriz = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

for linha in matriz:
    print(linha)

print(matriz[0][1])


listas = [[i * j for j in range(5)] for i in range(3)]
for k in listas:
    print(k)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\01-impressao_sequencia.py
Conteúdo:
for i in range(1,11):
    print(i, end='')

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\02-impressao_sequencia_reversa.py
Conteúdo:
for i in range (10, 0, -1):
    print(i)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\03-soma_numeros_for.py
Conteúdo:
soma = 0
for i in range(1, 101):
    soma += i
print(i)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\05-quadrados_numeros.py
Conteúdo:
for i in range(1, 21):
    print(i * i) #i**2

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\06-impressao_string.py
Conteúdo:
string = "Python"
for i in string:
    print(i)



#for char in "Python":
#    print(char)


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\07-soma_pares.py
Conteúdo:
soma = 0

for i in range(1, 101):
    if i % 2 == 0:
        soma += i
print(soma)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\10-calculo_fatorial.py
Conteúdo:
fatorial = 1
n = 5
for i in range(1, n+1):
    fatorial *= i
print(fatorial)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\11-impressao_multiplos_tres.py
Conteúdo:
for i in range(1,101):
    if i % 3 == 0:
        print(i)

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\21-controle_fluxo_variavel.py
Conteúdo:
variavel = 0

if variavel > 0:
    print("positivo")
elif variavel < 0:
    print("negativo")
else:
    print("Zero")

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_for\23-verifica_primo.py
Conteúdo:
numero = 37
for i in range(2, numero):
    if numero % i == 0:
        print(numero, "não é um número primo")
        break
else:
    print(numero, "é um número primo")


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\loop_while\24-contador_while.py
Conteúdo:
numero = 0
while numero < 11:
    print (numero)
    numero += 1

Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\sets\28-união_interseccao_sets.py
Conteúdo:
set1 = {1, 2, 3}
set2 = {4, 3, 6}

uniao = set1.union(set2)
interseccao = set1.intersection(set2)

print("União:", uniao)
print("Interseção:", interseccao)


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\strings\29-manipulacao_string.py
Conteúdo:
string = "     boA tard2 4migo    "
string2 = "tarde"

print(string.upper())
print(string.lower())
print(string.capitalize())
print(string.strip())
print(string.replace("tarde", "NOITE"))
print(string.swapcase())
print(string.title())
print(string.replace(" ", "_"))
print(string[::-1])
print(string.find(string2))
print(string.count(string2))
print("boa {}".format(string2))
print(f"boa {string2}")
print(string2[-1:])
print(list(string2))
print(string2 * 5)

print(" ".join(string.split()[::-1]))

palavras = string.split()
iniciais = [word[0].upper() for word in palavras]
acronimo = ''.join(iniciais)

print(acronimo)


Nome do arquivo: C:\Users\ryang\OneDrive\Área de Trabalho\Projetos\python\Exercicios Python\tuplas\33-tuplas_basicas.py
Conteúdo:
tupla = (10, "texto", [1, 2, 3], {'a': 1, 'b': 2})


print("Elementos da tupla:")
for elemento in tupla:
    print()
    print(f'Elemeto: {elemento}')
    print(type(elemento))


try:
    tupla[0] = 20  
except TypeError as e:
    print("Erro ao tentar modificar a tupla:", e)

#Desempacotamento 
a, b, c, d = tupla

print("a:", a)
print("b:", b)
print("c:", c)
print("d:", d)



